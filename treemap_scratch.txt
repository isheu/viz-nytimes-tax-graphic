         /*

         var tmap = d3.layout.treemap()
            .size([twidth,theight])
            .value(function(d) { return d.size; });

         var tick_1 = d3.select("body")
            .append("div")
            .attr("id", "tick_1")
            .style("position", "absolute")
            .style("left", svg_margin);

         svg = d3.select("#tick_1").append("svg:svg")
            .attr("width",twidth + 2 * svg_margin)
            .attr("height",theight)

         var new_data = [];
         svg.selectAll("circle")
            .data(tmap.nodes(treedata_2))
            .enter().append("circle")
            .attr("cx", function(d, i) { 
                  new_data[i] = {"radius":(d.dx / 2), "x": (d.x + (d.dx / 2) + svg_margin), "y": (d.y + (d.dy / 2) + svg_margin)}
                  return d.x + (d.dx / 2) + "px" 
               })
            .attr("cy", function(d) { return d.y + (d.dy / 2) + "px" })
            .attr("r", function(d) { return d.name == "master" ? 1 : (Math.sqrt(d.dx * d.dy) / 2) - 2; });
         svg.selectAll("circle").remove()
         
         svg.selectAll("circle.node_1_center")
            .data(new_data)
            .enter().append("circle")
            .attr("class", "node_1_center")
            .attr("fill", "#333")
            .attr("stroke", "white")
            .attr("stroke-width", 1)
            .attr("cx", function(d, i) { return d.x + "px";})
            .attr("cy", function(d) { return d.y + "px" })
            .attr("r", function(d) { return d.radius; });


         var force = d3.layout.force()
             .nodes(new_data)
             .size([twidth, theight])
             .gravity(0.05)
             .friction(0.1)
             .charge(1)
             .on("tick", tick)
             .start();
         
         var circle = svg.selectAll("circle.node_1_center")

         function tick(e) {
           circle
               .each(cluster(10 * e.alpha * e.alpha))
               .each(collide(0.1))
               .attr("cx", function(d) { return d.x; })
               .attr("cy", function(d) { return d.y; });
         }

         /*
         svg.selectAll("rect.mapnode")
            .data(tmap.nodes(treedata_2))
            .enter().append("rect")
            .attr("fill", "white")
            .attr("stroke", "white")
            .attr("x", function(d) { return d.x + "px" })
            .attr("y", function(d) { return d.y + "px" })
            .attr("width", function(d) { return d.dx + "px" })
            .attr("height", function(d) { return d.dy + "px" });
         */

         */
         /*
         var filt_flattened_data_w_pos = [];
         setTimeout(function(g) {
            d3.selectAll(".by_tick_circle").data().forEach(function(d, i) {
                  filt_flattened_data_w_pos[i] =  {"radius": d.radius, "x": d.x + (d.t_value / 2) * (binwidth + svg_margin) , "y": d.y + subchart_1_trans_y + (svg_height - d.theight) / 2, "t_value": d.t_value, "name": d.name, "sector": d.sector, "tax_rate": d.tax_rate}
               });
            d3.selectAll("div.tick").remove()
            main_svg.selectAll(".f_circle")
               .data(filt_flattened_data_w_pos, function(d) { return d.name; })
               .enter().append("circle")
               .attr("class", "f_circle")
               .attr("fill", function(d) { return "rgba(96,96,96," + 0.35 * ((d.t_value / 2) % 2 + 1) + ")" ; })
               .attr("cx", function(d, i) { return d.x + "px";})
               .attr("cy", function(d) { return d.y + "px" })
               .attr("r", function(d) { return d.radius; });
            }, 6500);

         var cluster_force = d3.layout.force()
         setTimeout(function(g) {
            cluster_force
                .nodes(filt_flattened_data_w_pos)
                .size([800, 600])
                .gravity(0)
                .friction(0.1)
                .charge(1)
                .on("tick", cluster_sub_tick)
                .start()
         }, 7500);
         */

               /*var filt_data;            
               console.log(sectors[i])
               setTimeout(function(g) {
                  filt_data = d3.nest()
                     .key(function(d) { return d.tax_rate_bin; })
                     .entries(company_data.filter(function(d) { return d.sector == sectors[i]; }));
                  max_binheight = 100;
                  ndata_tot_size = [], max_tot_size = 0, ndata_binheight = [];

                  for (var i = 0; i < filt_data.length; i++) {
                     ndata_tot_size[i] = 0;
                     nested_data[i].values.forEach(function(d) { ndata_tot_size[i] += d.capital })
                     if (ndata_tot_size[i] > max_tot_size) { max_tot_size = ndata_tot_size[i]; }
                  }
                  for (var i = 0; i < filt_data.length; i++) {
                     ndata_binheight[i] = max_binheight * (Math.sqrt(ndata_tot_size[i]) / Math.sqrt(max_tot_size))
                  }
                  var line_ticks = []
                  for (var i = 0; i < filt_data.length; i++) {         
                     line_ticks[i] = sgm_on_line(binwidth, ndata_binheight[i], filt_data[i].values[0].tax_rate_bin, filt_data[i], subchart_1_trans_y);
                     line_ticks[i]()
                  }
               }, 5500);

               var filt_flattened_data_w_pos = [];
               var filt_data_flatten = flatten_placed_bubbles("f_circle", filt_flattened_data_w_pos, subchart_1_trans_y)
               
               var filt_tick_fn = cluster_tick_fn()
               filt_tick_fn.set_obj_id("f_circle").set_data_id(filt_flattened_data_w_pos)

               var filt_data_cluster_fn;
               var filt_cluster_force = d3.layout.force()
               
               setTimeout(filt_data_flatten, 6500);
               setTimeout(function() {            
                  filt_data_cluster_fn = apply_cluster_force_algo("f_circle", filt_flattened_data_w_pos, filt_tick_fn, filt_cluster_force)
               }, 7250);         
               setTimeout(filt_data_cluster_fn, 7500); */
/*
bubble_color_wheel = [  { "value": 0, "color": "rgba(0,92,92,0.6)" }, 
                        { "value": 15, "color": "rgba(0,128,192,0.6)" }, 
                        { "value": 30, "color": "rgba(192,128,92,0.6)" }, 
                        { "value": 45, "color": "rgba(255,96,0,0.6)" }, 
                        { "value": 60, "color": "rgba(92,128,128,0.6)" }];
*/

